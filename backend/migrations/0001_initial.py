# Generated by Django 5.1.2 on 2024-11-06 04:33

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessoryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Accessory Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Accessory Type',
                'verbose_name_plural': 'Accessory Types',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Complaint')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Department Name')),
                ('phone', models.CharField(max_length=100, verbose_name='Phone')),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Device')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='Model')),
                ('sn', models.CharField(blank=True, max_length=100, verbose_name='Serial Number')),
                ('os', models.CharField(max_length=100, verbose_name='Operating System')),
                ('anydesk', models.CharField(blank=True, max_length=100, verbose_name='AnyDesk Address')),
                ('specs', models.TextField(blank=True, verbose_name='Technical Specifications')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Device Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Device Type',
                'verbose_name_plural': 'Device Types',
            },
        ),
        migrations.CreateModel(
            name='PriorityLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Priority Level')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Priority Level',
                'verbose_name_plural': 'Priority Levels',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='User Role')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='ServiceLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Service Location')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Service Location',
                'verbose_name_plural': 'Service Locations',
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Service Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'Service Type',
                'verbose_name_plural': 'Service Types',
            },
        ),
        migrations.CreateModel(
            name='Accessory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Accessory')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='Model')),
                ('sn', models.CharField(blank=True, max_length=100, verbose_name='Serial Number')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('accessory_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accessories', to='backend.accessorytype', verbose_name='Accessory Type')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accessories', to='backend.device', verbose_name='Linked Device')),
            ],
            options={
                'verbose_name': 'Accessory',
                'verbose_name_plural': 'Accessories',
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='backend.devicetype', verbose_name='Device Type'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mobile', models.CharField(max_length=25, verbose_name='Mobile No.')),
                ('about', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emps', to='backend.department', verbose_name='Department')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emps', to='backend.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Employee User',
                'verbose_name_plural': 'Employee Users',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='employee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='backend.profile', verbose_name='Employee'),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Service Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('diagnose', models.TextField(blank=True, verbose_name='Diagnose')),
                ('solution', models.TextField(blank=True, verbose_name='Solution')),
                ('state', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('rejected', 'rejected'), ('approved', 'approved'), ('started', 'started'), ('ended', 'ended'), ('closed', 'closed'), ('archived', 'archived')], default='pending', max_length=100, no_check_for_status=True)),
                ('pending_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='state', when={'pending'})),
                ('rejected_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'rejected'})),
                ('approved_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'approved'})),
                ('started_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'started'})),
                ('ended_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'ended'})),
                ('closed_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'closed'})),
                ('archived_at', model_utils.fields.MonitorField(blank=True, default=None, monitor='state', null=True, when={'archived'})),
                ('state_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='state')),
                ('estimated_time', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Estimated Time')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updatet_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('complaint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='backend.complaint', verbose_name='Complaint')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='backend.device', verbose_name='Device')),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='empservices', to='backend.profile', verbose_name='Employee')),
                ('priority_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='backend.prioritylevel', verbose_name='Priority Level')),
                ('worker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wrkservices', to='backend.profile', verbose_name='Worker')),
                ('servie_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='backend.servicelocation', verbose_name='Service Location')),
                ('servie_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='backend.servicetype', verbose_name='Service Type')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Feedback Name')),
                ('rate', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rate')),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
            },
        ),
    ]
